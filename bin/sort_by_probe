#! /usr/bin/env ruby

require 'find'
require 'fileutils'
require 'set'

PROBE_NAMES = /^(gam|sym|eub|non)/i
COLORS = {
    'c1'   => 'DAPI',
    'c5'   => 'Cy3',
    'c4'   => 'Cy5'
}

classifier = Hash.new { |h, k| h[k] = Hash.new { |h, k| h[k] = Array.new } }
all_files  = Hash.new 

Find.find(ARGV.first || '.') do |path|
    next unless path.downcase =~ /\.jpg$/
    
    basename = File.basename(path.downcase, '.jpg')
    parts      = basename.split('_')
    if probe_name = parts.find { |p| PROBE_NAMES =~ p }
        if all_files.has_key?(basename)
            STDERR.puts "Name collision on #{basename}:"
            STDERR.puts "  #{path}"
            STDERR.puts "  #{all_files[basename]}"
            exit(1)
        end
        all_files[basename] = path

        color_name = parts.last
        COLORS.each do |src, dst|
            color_name = color_name.gsub(src, dst)
        end

        classifier[color_name.downcase][probe_name.downcase] << path
    end
end

if ARGV.size == 2
    classifier.keys.sort.each do |color|
        FileUtils.mkdir(color)
        Dir.chdir(color) do
            classifier[color].keys.sort.each do |probe|
                FileUtils.mkdir(probe)
                Dir.chdir(probe) do
                    classifier[color][probe].each do |path|
                        FileUtils.cp path, '.'
                    end
                end
            end
        end
    end
    
else
    STDERR.puts "Simulation mode. Give the 'doit' option to actually copy"
    classifier.keys.sort.each do |color|
        puts color
        classifier[color].keys.sort.each do |probe|
            puts "  #{probe}"
            classifier[color][probe].each do |path|
                puts "    #{path}"
            end
        end
    end
end

